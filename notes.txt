Example Caddyfile for Staging

{
    email admin@example.com
    acme_dns cloudflare {env.CLOUDFLARE_API_TOKEN}
    acme_ca https://acme-staging-v02.api.letsencrypt.org/directory
    debug
}

# Wildcard for all subdomains
*.example.com {
    reverse_proxy backend:8080
    encode gzip
    log {
        output file /logs/access.log
        format json
    }
}

example.com {
    reverse_proxy backend:8080
    encode gzip
    log {
        output file /logs/access.log
        format json
    }
}


Fallback Caddyfile

{
    email you@example.com
    acme_ca https://acme-staging-v02.api.letsencrypt.org/directory
}

auth.domain.com {
    reverse_proxy http://keycloak:8080
}

https://domain.com {
    tls {
        dns cloudflare {env.CLOUDFLARE_API_TOKEN}
    }

    reverse_proxy /guacamole guacamole:8080

    log {
        output stdout
        format console
        level INFO
    }
}


Caddyfile #1

{
    email admin@example.com
    acme_dns cloudflare {env.CLOUDFLARE_API_TOKEN} 
    acme_ca https://acme-staging-v02.api.letsencrypt.org/directory
    debug                                           
}

example.com {
    # Redirect root domain to /guacamole/
    @root path /
    redir @root /guacamole/

    handle /guacamole/* {
        reverse_proxy guacamole:8080
    }

    encode gzip

    log {
        output stdout
        format console
        level INFO
    }
}

api.example.com {
    reverse_proxy http://keycloak:8080 {
        header_up X-Forwarded-Proto {scheme}
        header_up X-Forwarded-Host {host}
        header_up Host {host}
    }
    encode gzip
    log {
        output stdout
        format console
        level INFO
    }
}


Basic Auth example

nebird.example.com {
    # Public access to homepage
    reverse_proxy / localhost:8080

    # Basic Auth for internal dashboard
    basicauth /admin/* {
        admin [bcrypt-hash]
    }
    reverse_proxy /admin/* localhost:8080

    # OAuth for user portal (via plugin or external auth proxy)
    reverse_proxy /user/* auth.example.com {
        header_up Authorization {http.request.header.Authorization}
    }
}
